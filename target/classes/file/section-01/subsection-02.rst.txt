堆内内存增涨异常
----------------

堆内内存异常增涨最常见的原因是泄漏，主要是JVM托管的Heap由于应用不正确的使用导致堆内存不断增长。如果用户没有通过参数-Xmx限制堆的大小，用户通过top命令会发现RSS越来越大，直至超过操作系统的上限被内核OOM Kill，如果用户限制了-Xmx堆大小，日志会报OOM错误。

另外业务压力突然变大也会造成堆内内存异常增涨。

故障表现
^^^^^^^^

故障常见表现:

- 如果用户没有配置-Xmx限制堆内存，系统top命令显示Java进程RSS明显超过合理范围，并且一直持续增长
- 如果用户没有配置-Xmx限制堆内存, Java进程莫名奇妙消失，而且尽管启动脚本已经设置ulimit -c unlimited，但磁盘没有留下任何core文件.
- 如果用户限制了-Xmx堆内存大小，Java进程日志报OutOfMemory错误。
- GC日志频繁GC, 并且GC效率不佳，无法回收内存

故障原因
^^^^^^^^

故障原因可能是：

- 业务压力变大导致内存需求变大
- Java对象泄漏

当对堆内存表现疑似泄漏时, 业务压力变大导致内存需求变大的场景需要首先被排查。如果业务压力比较大，CPU使用率以及网络IO活动比较高，往往也会表现出OOM等堆内内存泄漏类似的症状。

另外就是一种可能就是代码逻辑上的失误导致的Java对象泄漏。

故障排查
^^^^^^^^

堆内内存的故障排查相对比较简单，主要思路就是分析出泄漏点，找到线索，然后再修改代码。

业务压力变大
""""""""""""

这种情况往往容易被忽视, 通过这两步可以初步确认这类问题:

- 系统资源使用量增高，监控工具显示CPU使用率, 网络IO活动以及业务量指标增加明显。
- 大量Java线程处于运行状态，用户可以通过JDK自带的jstack命令来确认线程数和当前线程的状态。


每个线程在执行业务逻辑时都会占用一定堆空间，当系统压力变大时线程数增多时，总体内存使用会增加，这就给GC带来了比较大的压力。即使线程数不变，在业务繁忙的时候，每个线程处理的事情变多了，占用的内存也会变多，都可能导致GC因压力大增而变慢甚至Full GC。


Java对象泄漏
""""""""""""

主要是由Java逻辑失误造成，有各种各样的表现，关键是分析泄漏点。Java生态中有各种各样的工具可以支持，比如zprofiler，比如MAT，通过这些工具能够分析出堆中目前被哪些存活对象，这些对象是通过哪些引用被GC Root直接或间接使用而无法被回收。

要确认该问题，可以：

- 首先通过jmap命令产生一个Java进程的HeapDump，然后将该HeapDump上传到zprofiler/eclipse-mat上进行分析。
- 然后通过zprofiler/eclipse-mat中的类视图和内存泄露报表来查看整个Java进程中的堆被哪些对象所占据。如果发现某个类的Retained Heap占有数量超过10%，往往意味着这类问题。
- 还可以结合GC日志来进一步分析，如果发现GC日志中频繁发生GC，而且GC效率很差，每次CMS GC，Mixed GC或者Full GC之后依然有明显不合理的大量存活的对象，也可以进一步确认该故障。

当发现某个类的内存占用比例非常不合理后，可以通过zprofiler/eclipse-mat排查下面亮点：

- 找出这些对象的被哪些对象引用支配。
- 找出这些对象到GC Root的引用链路是怎样的，借助于分析引用链路上对象间关系信息和对象内存内容，用户应该可以发现泄漏的线索。

一种常见的泄露原因是由于分配大数组等特大对象引起的。AJDK8支持两个参数-XX:+TraceG1HObjAllocation（只支持G1策略）和-XX:ArrayAllocationWarningSize=xxx(只支持CMS策略，默认512M)，使用这两个参数，可以将分配大对象时的线程堆栈打印出来，便于排查问题。

如果应用的泄漏点比较明显，泄漏集中在一个特殊的类上，也可通过存活对象的直方图类型分布来排查，没有必要进行昂贵的HeapDump分析。可以通过下面的jmap命令显示直方图类型分布。

.. code-block:: bash
    
    jmap histo:live $PID

对于CMS GC策略，AJDK8还有一个参数-XX:+PrintYoungGenHistoAfterParNewGC，可以在下次ParNew GC时通过标准输出打印直方图类型分布。命令格式如下：

.. code-block:: bash

    jinfo -flag +PrintYoungGenHistoAfterParNewGC $PID


故障解决
^^^^^^^^

业务压力变大导致的问题只能通过增加内存和优化设计来解决。如果增加内存受条件限制不被允许，可以尝试利用排查用户逻辑失误的方法来指导优化设计，通过jmap和zprofiler虽然排查不出错误点，但也可以给优化指出一些线索。

如果是Java对象泄漏的故障，开发人员则需要根据zprofiler提供的线索，通过review代码加以解决，需要依赖开发人员对该Java应用业务逻辑及中间件系统的深入理解。


